const $path = require("path");
const $fs = require("fs");
var Ajv = require('ajv'); 
var pack = require('ajv-pack');
const schema = require('./solana');
const { compile } = require('json-schema-to-typescript');

var ajv = new Ajv({sourceCode: true});
const dir = $path.join(__dirname, `/validators`);
if(!$fs.existsSync(dir)) {
    $fs.mkdirSync(dir);
} 

const filesToImport = {};
ajv.addSchema(schema);

schema.forEach(s => {
    const id = s['$id'];
    const fileName = `./validators/${id}.js`;

    var moduleCode = 
`// This file is autogenerated by ${__filename.replace(__dirname, 'build')}, do not edit
${pack(ajv, ajv.getSchema(id))}
`.replace('module.exports = validate;', 'export { validate };');
    filesToImport[id] = fileName;
    $fs.writeFileSync($path.join(__dirname, fileName), moduleCode);

    console.log(s);
    compile(s, id)
        .then(ts => $fs.writeFileSync($path.join(__dirname, `./validators/${id}.d.ts`), ts))
});

const imports = Object.keys(filesToImport).reduce((acc, key) => {
    const loc = filesToImport[key];
    const line = `import * as ${key} from './${key}';\r\n`;
    return acc = acc + line;
}, '');

const code = `
${imports}
export { ${Object.keys(filesToImport).join(', ')} };
`;

$fs.writeFileSync($path.join(__dirname, './validators/index.js'), code);
